// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class IdeaTokenCreated extends EthereumEvent {
  get params(): IdeaTokenCreated__Params {
    return new IdeaTokenCreated__Params(this);
  }
}

export class IdeaTokenCreated__Params {
  _event: IdeaTokenCreated;

  constructor(event: IdeaTokenCreated) {
    this._event = event;
  }

  get domain(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newContractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IdeaTokenBought extends EthereumEvent {
  get params(): IdeaTokenBought__Params {
    return new IdeaTokenBought__Params(this);
  }
}

export class IdeaTokenBought__Params {
  _event: IdeaTokenBought;

  constructor(event: IdeaTokenBought) {
    this._event = event;
  }

  get domain(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get publicationAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get cost(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get marketCapBefore(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get marketCapAfter(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalMarketCap(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class IdeaTokenSold extends EthereumEvent {
  get params(): IdeaTokenSold__Params {
    return new IdeaTokenSold__Params(this);
  }
}

export class IdeaTokenSold__Params {
  _event: IdeaTokenSold;

  constructor(event: IdeaTokenSold) {
    this._event = event;
  }

  get domain(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get publicationAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get marketCapBefore(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get marketCapAfter(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalMarketCap(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class IdeaTokenFactory extends SmartContract {
  static bind(address: Address): IdeaTokenFactory {
    return new IdeaTokenFactory("IdeaTokenFactory", address);
  }

  marketCap(): BigInt {
    let result = super.call("marketCap", []);

    return result[0].toBigInt();
  }

  try_marketCap(): CallResult<BigInt> {
    let result = super.tryCall("marketCap", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tokenContractAddresses(param0: BigInt): Address {
    let result = super.call("tokenContractAddresses", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokenContractAddresses(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("tokenContractAddresses", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  domainStringCheck(str: string): boolean {
    let result = super.call("domainStringCheck", [
      EthereumValue.fromString(str)
    ]);

    return result[0].toBoolean();
  }

  try_domainStringCheck(str: string): CallResult<boolean> {
    let result = super.tryCall("domainStringCheck", [
      EthereumValue.fromString(str)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getPublicationContractAddress(_domainStr: string): Address {
    let result = super.call("getPublicationContractAddress", [
      EthereumValue.fromString(_domainStr)
    ]);

    return result[0].toAddress();
  }

  try_getPublicationContractAddress(_domainStr: string): CallResult<Address> {
    let result = super.tryCall("getPublicationContractAddress", [
      EthereumValue.fromString(_domainStr)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  domainStrToId(_domainStr: string): BigInt {
    let result = super.call("domainStrToId", [
      EthereumValue.fromString(_domainStr)
    ]);

    return result[0].toBigInt();
  }

  try_domainStrToId(_domainStr: string): CallResult<BigInt> {
    let result = super.tryCall("domainStrToId", [
      EthereumValue.fromString(_domainStr)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPublicationTokenSupply(_domainStr: string): BigInt {
    let result = super.call("getPublicationTokenSupply", [
      EthereumValue.fromString(_domainStr)
    ]);

    return result[0].toBigInt();
  }

  try_getPublicationTokenSupply(_domainStr: string): CallResult<BigInt> {
    let result = super.tryCall("getPublicationTokenSupply", [
      EthereumValue.fromString(_domainStr)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAccountBalance(_domainStr: string, _checkAddress: Address): BigInt {
    let result = super.call("getTokenAccountBalance", [
      EthereumValue.fromString(_domainStr),
      EthereumValue.fromAddress(_checkAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenAccountBalance(
    _domainStr: string,
    _checkAddress: Address
  ): CallResult<BigInt> {
    let result = super.tryCall("getTokenAccountBalance", [
      EthereumValue.fromString(_domainStr),
      EthereumValue.fromAddress(_checkAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCostOfIdeaToken(_domainStr: string, _qty: BigInt): BigInt {
    let result = super.call("getCostOfIdeaToken", [
      EthereumValue.fromString(_domainStr),
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);

    return result[0].toBigInt();
  }

  try_getCostOfIdeaToken(_domainStr: string, _qty: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getCostOfIdeaToken", [
      EthereumValue.fromString(_domainStr),
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPriceOfIdeaTokens(_domainStr: string, _qty: BigInt): BigInt {
    let result = super.call("getPriceOfIdeaTokens", [
      EthereumValue.fromString(_domainStr),
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);

    return result[0].toBigInt();
  }

  try_getPriceOfIdeaTokens(
    _domainStr: string,
    _qty: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getPriceOfIdeaTokens", [
      EthereumValue.fromString(_domainStr),
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokenCount(): BigInt {
    let result = super.call("getTokenCount", []);

    return result[0].toBigInt();
  }

  try_getTokenCount(): CallResult<BigInt> {
    let result = super.tryCall("getTokenCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  daiBalance(): BigInt {
    let result = super.call("daiBalance", []);

    return result[0].toBigInt();
  }

  try_daiBalance(): CallResult<BigInt> {
    let result = super.tryCall("daiBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rDaiBalance(): BigInt {
    let result = super.call("rDaiBalance", []);

    return result[0].toBigInt();
  }

  try_rDaiBalance(): CallResult<BigInt> {
    let result = super.tryCall("rDaiBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPublications(): Array<Address> {
    let result = super.call("getPublications", []);

    return result[0].toAddressArray();
  }

  try_getPublications(): CallResult<Array<Address>> {
    let result = super.tryCall("getPublications", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dai_contract_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rDai_contract_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _devFund(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minCashOutCoolDown(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _additionalNonOwnerCashOutCoolDown(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _payoutCapThresholdNum(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _payoutCapThresholdDenom(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _globalPayoutDust(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateIdeaTokenCall extends EthereumCall {
  get inputs(): CreateIdeaTokenCall__Inputs {
    return new CreateIdeaTokenCall__Inputs(this);
  }

  get outputs(): CreateIdeaTokenCall__Outputs {
    return new CreateIdeaTokenCall__Outputs(this);
  }
}

export class CreateIdeaTokenCall__Inputs {
  _call: CreateIdeaTokenCall;

  constructor(call: CreateIdeaTokenCall) {
    this._call = call;
  }

  get _domainStr(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateIdeaTokenCall__Outputs {
  _call: CreateIdeaTokenCall;

  constructor(call: CreateIdeaTokenCall) {
    this._call = call;
  }
}

export class BuyIdeaTokenCall extends EthereumCall {
  get inputs(): BuyIdeaTokenCall__Inputs {
    return new BuyIdeaTokenCall__Inputs(this);
  }

  get outputs(): BuyIdeaTokenCall__Outputs {
    return new BuyIdeaTokenCall__Outputs(this);
  }
}

export class BuyIdeaTokenCall__Inputs {
  _call: BuyIdeaTokenCall;

  constructor(call: BuyIdeaTokenCall) {
    this._call = call;
  }

  get _domainStr(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _qty(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyIdeaTokenCall__Outputs {
  _call: BuyIdeaTokenCall;

  constructor(call: BuyIdeaTokenCall) {
    this._call = call;
  }
}

export class SellIdeaTokenCall extends EthereumCall {
  get inputs(): SellIdeaTokenCall__Inputs {
    return new SellIdeaTokenCall__Inputs(this);
  }

  get outputs(): SellIdeaTokenCall__Outputs {
    return new SellIdeaTokenCall__Outputs(this);
  }
}

export class SellIdeaTokenCall__Inputs {
  _call: SellIdeaTokenCall;

  constructor(call: SellIdeaTokenCall) {
    this._call = call;
  }

  get _domainStr(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _qty(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellIdeaTokenCall__Outputs {
  _call: SellIdeaTokenCall;

  constructor(call: SellIdeaTokenCall) {
    this._call = call;
  }
}

export class SetPayoutCapThresholdCall extends EthereumCall {
  get inputs(): SetPayoutCapThresholdCall__Inputs {
    return new SetPayoutCapThresholdCall__Inputs(this);
  }

  get outputs(): SetPayoutCapThresholdCall__Outputs {
    return new SetPayoutCapThresholdCall__Outputs(this);
  }
}

export class SetPayoutCapThresholdCall__Inputs {
  _call: SetPayoutCapThresholdCall;

  constructor(call: SetPayoutCapThresholdCall) {
    this._call = call;
  }

  get _payoutCapThresholdNum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _payoutCapThresholdDenom(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPayoutCapThresholdCall__Outputs {
  _call: SetPayoutCapThresholdCall;

  constructor(call: SetPayoutCapThresholdCall) {
    this._call = call;
  }
}

export class SetCoolDownCall extends EthereumCall {
  get inputs(): SetCoolDownCall__Inputs {
    return new SetCoolDownCall__Inputs(this);
  }

  get outputs(): SetCoolDownCall__Outputs {
    return new SetCoolDownCall__Outputs(this);
  }
}

export class SetCoolDownCall__Inputs {
  _call: SetCoolDownCall;

  constructor(call: SetCoolDownCall) {
    this._call = call;
  }

  get _minCashOutCoolDown(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _additionalNonOwnerCashOutCoolDown(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCoolDownCall__Outputs {
  _call: SetCoolDownCall;

  constructor(call: SetCoolDownCall) {
    this._call = call;
  }
}

export class SetGlobalPayoutDustCall extends EthereumCall {
  get inputs(): SetGlobalPayoutDustCall__Inputs {
    return new SetGlobalPayoutDustCall__Inputs(this);
  }

  get outputs(): SetGlobalPayoutDustCall__Outputs {
    return new SetGlobalPayoutDustCall__Outputs(this);
  }
}

export class SetGlobalPayoutDustCall__Inputs {
  _call: SetGlobalPayoutDustCall;

  constructor(call: SetGlobalPayoutDustCall) {
    this._call = call;
  }

  get _globalPayoutDust(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGlobalPayoutDustCall__Outputs {
  _call: SetGlobalPayoutDustCall;

  constructor(call: SetGlobalPayoutDustCall) {
    this._call = call;
  }
}

export class DistributeInterestCall extends EthereumCall {
  get inputs(): DistributeInterestCall__Inputs {
    return new DistributeInterestCall__Inputs(this);
  }

  get outputs(): DistributeInterestCall__Outputs {
    return new DistributeInterestCall__Outputs(this);
  }
}

export class DistributeInterestCall__Inputs {
  _call: DistributeInterestCall;

  constructor(call: DistributeInterestCall) {
    this._call = call;
  }
}

export class DistributeInterestCall__Outputs {
  _call: DistributeInterestCall;

  constructor(call: DistributeInterestCall) {
    this._call = call;
  }
}
