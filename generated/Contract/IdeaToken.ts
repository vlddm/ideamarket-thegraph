// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IdeaToken extends SmartContract {
  static bind(address: Address): IdeaToken {
    return new IdeaToken("IdeaToken", address);
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): CallResult<boolean> {
    let result = super.tryCall("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  domainStrId(): string {
    let result = super.call("domainStrId", []);

    return result[0].toString();
  }

  try_domainStrId(): CallResult<string> {
    let result = super.tryCall("domainStrId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call("transferFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  marketCap(): BigInt {
    let result = super.call("marketCap", []);

    return result[0].toBigInt();
  }

  try_marketCap(): CallResult<BigInt> {
    let result = super.tryCall("marketCap", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call("increaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(addedValue)
    ]);

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("increaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(addedValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  baseContract(): Address {
    let result = super.call("baseContract", []);

    return result[0].toAddress();
  }

  try_baseContract(): CallResult<Address> {
    let result = super.tryCall("baseContract", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(account)]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  domainId(): BigInt {
    let result = super.call("domainId", []);

    return result[0].toBigInt();
  }

  try_domainId(): CallResult<BigInt> {
    let result = super.tryCall("domainId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getSellPrice(_totalSupply: BigInt, _nbTokensToSell: BigInt): BigInt {
    let result = super.call("getSellPrice", [
      EthereumValue.fromUnsignedBigInt(_totalSupply),
      EthereumValue.fromUnsignedBigInt(_nbTokensToSell)
    ]);

    return result[0].toBigInt();
  }

  try_getSellPrice(
    _totalSupply: BigInt,
    _nbTokensToSell: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getSellPrice", [
      EthereumValue.fromUnsignedBigInt(_totalSupply),
      EthereumValue.fromUnsignedBigInt(_nbTokensToSell)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call("decreaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(subtractedValue)
    ]);

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("decreaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(subtractedValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(recipient: Address, amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("transfer", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getBuyPrice(_totalSupply: BigInt, _nbTokensToBuy: BigInt): BigInt {
    let result = super.call("getBuyPrice", [
      EthereumValue.fromUnsignedBigInt(_totalSupply),
      EthereumValue.fromUnsignedBigInt(_nbTokensToBuy)
    ]);

    return result[0].toBigInt();
  }

  try_getBuyPrice(
    _totalSupply: BigInt,
    _nbTokensToBuy: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getBuyPrice", [
      EthereumValue.fromUnsignedBigInt(_totalSupply),
      EthereumValue.fromUnsignedBigInt(_nbTokensToBuy)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call("allowance", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(spender)
    ]);

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): CallResult<BigInt> {
    let result = super.tryCall("allowance", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(spender)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  burned_amt(): BigInt {
    let result = super.call("burned_amt", []);

    return result[0].toBigInt();
  }

  try_burned_amt(): CallResult<BigInt> {
    let result = super.tryCall("burned_amt", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalDeposit(): BigInt {
    let result = super.call("totalDeposit", []);

    return result[0].toBigInt();
  }

  try_totalDeposit(): CallResult<BigInt> {
    let result = super.tryCall("totalDeposit", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  applyInterestMultiplier(amount: BigInt): BigInt {
    let result = super.call("applyInterestMultiplier", [
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_applyInterestMultiplier(amount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("applyInterestMultiplier", [
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCostOfBuyingTokens(_qty: BigInt): BigInt {
    let result = super.call("getCostOfBuyingTokens", [
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);

    return result[0].toBigInt();
  }

  try_getCostOfBuyingTokens(_qty: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getCostOfBuyingTokens", [
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getBasePriceofSellingTokens(_qty: BigInt): BigInt {
    let result = super.call("getBasePriceofSellingTokens", [
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);

    return result[0].toBigInt();
  }

  try_getBasePriceofSellingTokens(_qty: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getBasePriceofSellingTokens", [
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPriceofSellingTokens(_qty: BigInt): BigInt {
    let result = super.call("getPriceofSellingTokens", [
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);

    return result[0].toBigInt();
  }

  try_getPriceofSellingTokens(_qty: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getPriceofSellingTokens", [
      EthereumValue.fromUnsignedBigInt(_qty)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rDaiBalance(): BigInt {
    let result = super.call("rDaiBalance", []);

    return result[0].toBigInt();
  }

  try_rDaiBalance(): CallResult<BigInt> {
    let result = super.tryCall("rDaiBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends EthereumCall {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends EthereumCall {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _baseContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rdai_contract_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get devFund(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _domainId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _domainStrId(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _tokensInEachInterval(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _priceRisePerInterval(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _basePrice(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _totalTokensWithoutPriceRise(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RDaiTransferCall extends EthereumCall {
  get inputs(): RDaiTransferCall__Inputs {
    return new RDaiTransferCall__Inputs(this);
  }

  get outputs(): RDaiTransferCall__Outputs {
    return new RDaiTransferCall__Outputs(this);
  }
}

export class RDaiTransferCall__Inputs {
  _call: RDaiTransferCall;

  constructor(call: RDaiTransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RDaiTransferCall__Outputs {
  _call: RDaiTransferCall;

  constructor(call: RDaiTransferCall) {
    this._call = call;
  }
}

export class BuyTokensCall extends EthereumCall {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get _qty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get payAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }
}

export class SellTokensCall extends EthereumCall {
  get inputs(): SellTokensCall__Inputs {
    return new SellTokensCall__Inputs(this);
  }

  get outputs(): SellTokensCall__Outputs {
    return new SellTokensCall__Outputs(this);
  }
}

export class SellTokensCall__Inputs {
  _call: SellTokensCall;

  constructor(call: SellTokensCall) {
    this._call = call;
  }

  get _qty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get payAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SellTokensCall__Outputs {
  _call: SellTokensCall;

  constructor(call: SellTokensCall) {
    this._call = call;
  }
}
